import javax.swing.*;
import java.util.ArrayList;

public class MainForm {
    private JPanel mainPanel;
    private JTabbedPane tabbedPane1;
    private JTextField textField1;
    private JRadioButton 是否需要父进度来解锁RadioButton;
    private JTextPane 进度描述ASCIITextPane;
    private JTextField iconTextField;
    private JTextField textField2;
    private JTextField textField3;
    private JRadioButton 是否无需解锁父进度即可见RadioButton;
    private JRadioButton 是否以直线连接父进度RadioButton;
    private JRadioButton 普通RadioButton;
    private JRadioButton 任务RadioButton;
    private JRadioButton 挑战RadioButton;
    private JRadioButton 左击方块RadioButton;
    private JRadioButton 右击方块RadioButton;
    private JTextField 模组ID方块物品IDTextField;
    private JRadioButton 击杀生物RadioButton;
    private JRadioButton 获取物品RadioButton;
    private JRadioButton 合成物品RadioButton;
    private JRadioButton 摧毁方块RadioButton;
    private JTextField 模组ID物品IDTextField1;
    private JTextField 生物IDTextField;
    private JButton 添加Button;
    private JList eventList;
    private JButton 生成进度Button;
    private JRadioButton 是否隐藏与父进度连线RadioButton;
    private JRadioButton 完成时是否显示进度完成标识RadioButton;
    private JRadioButton 完成时是否显示至聊天栏RadioButton;
    private JTextField fileNameTextField;
    private JTextField 进度文件夹路径文件名TextField;
    private JTextField 物品个数可留空TextField;
    private JRadioButton 是否一直隐藏RadioButton;
    private ArrayList<String> text;
    private ArrayList<String> eventListText;
    static int criteriaCount = 0;

    public MainForm() {
        eventListText = new ArrayList<>();
        text = new ArrayList<String>();
        text.add("//This file is generated by STSG, illegal changes may cause severe consequences.");
        ButtonGroup group = new ButtonGroup(){{
            add(任务RadioButton);
            add(挑战RadioButton);
            add(普通RadioButton);
        }};

        new ButtonGroup(){{
            add(是否一直隐藏RadioButton);
            add(是否无需解锁父进度即可见RadioButton);
        }};

        普通RadioButton.setSelected(true);
        ButtonGroup group2 = new ButtonGroup(){{
            add(击杀生物RadioButton);
            add(合成物品RadioButton);
            add(右击方块RadioButton);
            add(左击方块RadioButton);
            add(摧毁方块RadioButton);
            add(获取物品RadioButton);
        }};
        获取物品RadioButton.setSelected(true);
        添加Button.addActionListener(e ->{
            String critName = getNewCriteriaName();
            try {
                if (击杀生物RadioButton.isSelected()) {
                    if(生物IDTextField.getText().isEmpty()) throw new Exception();
                    text.add(critName + " = addCriteria(\"" + critName + "\", \"minecraft:player_killed_entity\")");
                    text.add(critName + ".setEntityType(\"" + 生物IDTextField.getText() + "\")");
                    addStringToEventList("击杀"+生物IDTextField.getText());
                }
                else if (获取物品RadioButton.isSelected()) {
                    int count = 1;
                    if(模组ID物品IDTextField1.getText().isEmpty()) throw new Exception();
                    text.add(critName + " = addCriteria(\"" + critName + "\", \"minecraft:inventory_changed\")");
                    text.add(critName + ".addItem(<" + 模组ID物品IDTextField1.getText() + ">)");
                    if(!物品个数可留空TextField.getText().isEmpty()){
                        text.add(critName + ".setCount(" + 物品个数可留空TextField.getText() + ")");
                        count = Integer.parseInt(物品个数可留空TextField.getText());
                    }
                    addStringToEventList("获取物品"+模组ID物品IDTextField1.getText()+count+"个");
                }
                else if (右击方块RadioButton.isSelected()) {
                    if(模组ID方块物品IDTextField.getText().isEmpty()) throw new Exception();
                    text.add(critName + " = addCriteria(\"" + critName + "\", \"triumph:right_click_block\")");
                    text.add(critName + ".setBlock(<" + 模组ID方块物品IDTextField.getText() + ">)");
                    addStringToEventList("右击"+模组ID方块物品IDTextField.getText());
                }
                else if (合成物品RadioButton.isSelected()) {
                    int count = 1;
                    if(模组ID物品IDTextField1.getText().isEmpty()) throw new Exception();
                    text.add(critName + " = addCriteria(\"" + critName + "\", \"triumph:player_crafted_item\")");
                    text.add(critName + ".addItem(<" + 模组ID物品IDTextField1.getText() + ">)");
                    if(!物品个数可留空TextField.getText().isEmpty()){
                        text.add(critName + ".setCount(" + 物品个数可留空TextField.getText() + ")");
                        count = Integer.parseInt(物品个数可留空TextField.getText());
                    }
                    addStringToEventList("合成"+count+"个"+模组ID物品IDTextField1.getText());
                }
                else if(左击方块RadioButton.isSelected()){
                    if(模组ID方块物品IDTextField.getText().isEmpty()) throw new Exception();
                    text.add(critName + " = addCriteria(\"" + critName + "\", \"triumph:left_click_block\")");
                    text.add(critName + ".setBlock(<" + 模组ID方块物品IDTextField.getText() + ">)");
                    addStringToEventList("左击"+模组ID方块物品IDTextField.getText());
                }
                else if(摧毁方块RadioButton.isSelected()){
                    if(模组ID方块物品IDTextField.getText().isEmpty()) throw new Exception();
                    text.add(critName + " = addCriteria(\"" + critName + "\", \"triumph:player_destroy_block\")");
                    text.add(critName + ".setBlock(<" + 模组ID方块物品IDTextField.getText() + ">)");
                    addStringToEventList("摧毁"+模组ID方块物品IDTextField.getText());
                }
            }catch (Exception exception){
                JOptionPane.showMessageDialog(null,"添加事件失败，通常是因为在必填ID内未填入信息");
                System.out.println(exception);
            }
        });


        生成进度Button.addActionListener(e->{
            text.add("setIcon(<"+iconTextField.getText()+">)");
            text.add("setTitle(\""+textField1.getText()+"\")");
            text.add("setDescription(\""+进度描述ASCIITextPane.getText()+"\")");
            text.add("setPos("+textField2.getText()+","+textField3.getText()+")");

            //TODO 添加多个父进度
            if(是否需要父进度来解锁RadioButton.isSelected()){
                //TODO 添加多个 解锁事件
            }

            if(是否无需解锁父进度即可见RadioButton.isSelected()){
                text.add("alwaysVisible()");
            }else if(是否一直隐藏RadioButton.isSelected()){
                text.add("setHidden(true)");
            }

            if(是否隐藏与父进度连线RadioButton.isSelected()){
                text.add("hideLines()");
            }

            if(是否以直线连接父进度RadioButton.isSelected()){
                text.add("drawDirectLines(true)");
            }

            if(完成时是否显示进度完成标识RadioButton.isSelected()){
                text.add("setShowToast(true)");
            }
            else{
                text.add("setShowToast(false)");
            }

            if(完成时是否显示至聊天栏RadioButton.isSelected()){
                text.add("setAnnounceToChat(true)");
            }
            else{
                text.add("setAnnounceToChat(false)");
            }

            if(任务RadioButton.isSelected()){
                text.add("setFrameType(\"GOAL\")");
            }else if(挑战RadioButton.isSelected()){
                text.add("setFrameType(\"CHALLENGE\")");
            }



            if(Main.createAndWriteTXT(text, fileNameTextField.getText()+".txt")){
                JOptionPane.showMessageDialog(null, "成功生成进度");
                text.clear();
                text.add("//This file is generated by STSG, illegal changes may cause severe consequences.");
            }
            else JOptionPane.showMessageDialog(null, "生成进度失败，大部分情况下是由目录下同名文件引起的");
        });

    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("MainForm");
        frame.setContentPane(new MainForm().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private String getNewCriteriaName(){
        return "Criteria"+fileNameTextField.getText()+criteriaCount++;
    }

    private void addStringToEventList(String t){
        eventListText.add(t);
        eventList.setListData(eventListText.toArray());
    }
}
